{"version":3,"sources":["redux/counterReducer.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["initialState","seconds","minutes","status","timer","undefined","startAC","type","pauseAC","resetAC","CounterReducer","state","action","connect","counter","dispatch","startSecundomer","thunk","setInterval","pauseSecundomer","getState","clearInterval","resetSecundomer","props","className","onClick","Boolean","window","location","hostname","match","reducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ozBAAO,IAGHA,EAAe,CACfC,QAAS,EACTC,QAAS,EACTC,OAAQ,EACRC,WAAOC,GAiDLC,EAAU,SAACF,GAAD,MAAY,CAAEG,KAxDH,cAwDsBH,UAC3CI,EAAU,iBAAO,CAAED,KAxDE,gBAyDrBE,EAAU,iBAAO,CAAEF,KAxDE,gBA0DZG,EAnCQ,WAAmC,IAAlCC,EAAiC,uDAAzBX,EAAcY,EAAW,uCAErD,OAAQA,EAAOL,MACX,IA5BmB,cAiCf,OAJGI,EAAMV,SAAU,KACfU,EAAMV,QAAU,EAChBU,EAAMT,QAAUS,EAAMT,QAAQ,GAE3B,EAAP,GACOS,EADP,CAEIV,QAASU,EAAMV,QAAU,EAAGG,MAAOQ,EAAOR,QAIlD,IAtCmB,cAuCf,OAAO,EAAP,GACOO,EADP,CAEIV,QAASU,EAAMV,UAGvB,IA3CmB,cA4Cf,OAAO,EAAP,GACOU,EADP,CAEIV,QAASU,EAAMV,QAAU,EACzBC,QAASS,EAAMT,QAAS,IAIhC,QAAS,OAAOS,ICVTE,cAzBO,SAACF,GACrB,MAAO,CACLV,QAASU,EAAMG,QAAQb,QACvBC,QAASS,EAAMG,QAAQZ,UAGF,SAACa,GACxB,MAAO,CAELC,gBAAiB,WACf,IAAIC,EDlBiC,SAACF,GACxC,IAAIX,EAAQc,YAAY,WACpBH,EAAST,EAAQF,KAClB,MCgBDW,EAASE,IAEXE,gBAAiB,WACf,IAAIF,EDfgC,SAACF,EAAUK,GACjDC,cAAcD,IAAWN,QAAQV,OACjCW,EAASP,MCcPO,EAASE,IAEXK,gBAAiB,WACf,IAAIL,EDfiC,SAACF,EAASK,GACjDC,cAAcD,IAAWN,QAAQV,OACjCW,EAASN,MCcPM,EAASE,MAMAJ,CAtCH,SAACU,GACX,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,QAAQC,QAASF,EAAMP,iBAAtC,SACA,yBAAKQ,UAAU,QAAQC,QAASF,EAAMJ,iBAAtC,SACA,yBAAKK,UAAU,QAAQC,QAASF,EAAMD,iBAAtC,UAEA,yBAAKE,UAAU,UAAS,yBAAKA,UAAU,UAAUD,EAAMrB,SAAvD,IAAsE,yBAAKsB,UAAU,UAAUD,EAAMtB,aCDvFyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdFC,EAAUC,YAAgB,CAC1BlB,QAASJ,IAIEuB,EAFHC,YAAYH,EAAQI,YAAgBC,MCChDC,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GAAO,kBAAC,EAAD,OAAoBM,SAASC,eAAe,SFyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2d300675.chunk.js","sourcesContent":["export const START_WATCH = \"START_WATCH\";\r\nexport const PAUSE_WATCH = \"PAUSE_WATCH\";\r\nexport const RESET_WATCH = \"RESET_WATCH\";\r\nlet initialState = {\r\n    seconds: 0,\r\n    minutes: 0,\r\n    status: 0,\r\n    timer: undefined\r\n}\r\n\r\nexport const startStopWatchThunkAC = () => (dispatch) => {\r\n    let timer = setInterval(() => {\r\n        dispatch(startAC(timer))\r\n    }, 1000);\r\n\r\n\r\n}\r\nexport const stopStopWatchThunkAC = () => (dispatch, getState) => {\r\n    clearInterval(getState().counter.timer);\r\n    dispatch(pauseAC())\r\n}\r\nexport const resetStopWatchThunkAC = () => (dispatch,getState) => {\r\n    clearInterval(getState().counter.timer)\r\n    dispatch(resetAC())\r\n}\r\nconst CounterReducer = (state = initialState, action) => {\r\n    debugger\r\n    switch (action.type) {\r\n        case START_WATCH: {\r\n            if(state.seconds >=60){  \r\n                state.seconds = 0;\r\n                state.minutes = state.minutes+1;\r\n            }\r\n            return {\r\n                ...state,\r\n                seconds: state.seconds + 1, timer: action.timer,\r\n            }\r\n\r\n        }\r\n        case PAUSE_WATCH: {\r\n            return {\r\n                ...state,\r\n                seconds: state.seconds\r\n            }\r\n        }\r\n        case RESET_WATCH: {\r\n            return {\r\n                ...state,\r\n                seconds: state.seconds = 0,\r\n                minutes: state.minutes =0\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\nconst startAC = (timer) => ({ type: START_WATCH, timer});\r\nconst pauseAC = () => ({ type: PAUSE_WATCH});\r\nconst resetAC = () => ({ type: RESET_WATCH});\r\n\r\nexport default CounterReducer;","import React from 'react';\nimport './App.css';\nimport { connect } from \"react-redux\";\nimport { startStopWatchThunkAC ,stopStopWatchThunkAC,resetStopWatchThunkAC} from './redux/counterReducer';\n\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <div className='buttons'>\n      <div className='start' onClick={props.startSecundomer}>Start</div>\n      <div className='start' onClick={props.pauseSecundomer}>Pause</div>\n      <div className='start' onClick={props.resetSecundomer}>Reset</div>\n      </div>\n      <div className='screen'><div className='border'>{props.minutes}</div>-<div className='border'>{props.seconds}</div></div>\n    </div>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    seconds: state.counter.seconds,\n    minutes: state.counter.minutes\n  }\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n\n    startSecundomer: () => {\n      let thunk = startStopWatchThunkAC();\n      dispatch(thunk);\n    },\n    pauseSecundomer: () => {\n      let thunk = stopStopWatchThunkAC();\n      dispatch(thunk);\n    },\n    resetSecundomer: ()=>{\n      let thunk = resetStopWatchThunkAC();\n      dispatch(thunk);\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, combineReducers,applyMiddleware} from 'redux';\r\nimport CounterReducer from './counterReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet reducer = combineReducers({\r\n    counter: CounterReducer\r\n});\r\nlet store = createStore(reducer,applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}